name: Build AMI after merge

on:
  push:
    branches: [ main ]   # runs ONLY after a PR is merged into main

permissions:
  contents: read

jobs:
  test-build-ami:
    name: Run tests → Build artifact → Build AMI
    runs-on: ubuntu-latest
    timeout-minutes: 60

    # PostgreSQL for integration tests (runs on the GitHub runner)
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: csye_app
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD || 'localtestonly' }}
          POSTGRES_DB: webapp
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U csye_app -d webapp"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Guard so we fail early if the secret is missing in THIS repo
      - name: Ensure DB_PASSWORD secret exists (guard)
        run: |
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "ERROR: DB_PASSWORD secret is empty or not set in THIS REPO."
            exit 1
          fi
          echo "DB_PASSWORD is set (value hidden)."

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install psql client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client netcat-openbsd

      - name: Wait for Postgres port
        run: |
          for i in {1..30}; do
            nc -z localhost 5432 && echo "Postgres up" && exit 0
            echo "Waiting for Postgres... ($i)"
            sleep 2
          done
          echo "Postgres did not start in time" >&2
          exit 1

      # Your repo has schema.sql at the root
      - name: Initialize database schema
        env:
          DATABASE_URL: postgresql://csye_app:${{ secrets.DB_PASSWORD }}@localhost:5432/webapp
        run: |
          echo "Initializing DB from ./schema.sql ..."
          test -f schema.sql || { echo "schema.sql not found in repo root"; ls -la; exit 1; }
          psql "$DATABASE_URL" -f schema.sql
          echo "✅ Schema loaded"

      - name: Verify tables (debug)
        env:
          DATABASE_URL: postgresql://csye_app:${{ secrets.DB_PASSWORD }}@localhost:5432/webapp
        run: |
          psql "$DATABASE_URL" -c '\dt' || true

      - name: Install & test
        env:
          DATABASE_URL: postgresql://csye_app:${{ secrets.DB_PASSWORD }}@localhost:5432/webapp
          PGHOST: localhost
          PGUSER: csye_app
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          PGDATABASE: webapp
          PGPORT: 5432
          NODE_ENV: test
        run: |
          npm ci
          npm test

      # Build the application artifact on the runner (NOT inside the AMI)
      - name: Build artifact (zip)
        run: |
          mkdir -p dist
          # include exactly what /opt/webapp needs at runtime
          zip -r dist/artifact.zip src package*.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: dist/artifact.zip

      # AWS creds for DEV account
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # Packer setup (pin version to match local)
      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: '1.14.2'

      # Put the built artifact where the Packer file provisioner expects it
      - name: Download artifact for Packer
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: packer/dist

      - name: packer init
        working-directory: packer
        run: packer init .

      - name: packer build (AMI)
        working-directory: packer
        env:
          PACKER_LOG: "1"
        run: |
          packer build \
            -var "region=${{ secrets.AWS_REGION }}" \
            -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
            -var "app_port=${{ secrets.APP_PORT || 3000 }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            ubuntu-webapp.pkr.hcl
